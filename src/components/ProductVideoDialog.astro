---
import { Icon } from 'astro-icon/components'
export interface Props {
	video: {
		url: string
		title: string
		cover: string
	}
}

const { video } = Astro.props
---

<li
	id="show-dialog-btn"
	class="size-[64px] border-2 border-transparent ml-4 rounded-md overflow-hidden relative flex-shrink-0 flex items-center justify-center cursor-pointer">
	<img class="absolute inset-0 w-full h-full object-cover" src={video.cover} />
	<span class="bg-black absolute rounded-full p-2 z-10">
		<Icon name="tabler:player-play-filled" class="text-white" size={24} />
	</span>
</li>
<dialog id="video-dialog" class="bg-transparent">
	<div class="relative rounded-md overflow-hidden mx-2">
		<video data-src={video.url} class="" id="player" data-title={video.title} playsinline controls>
			<source src={video.url} type="video/mp4" />
		</video>
		<!-- <source src="/path/to/video.webm" type="video/webm" /> -->
		<button
			id="share-video-button"
			class="absolute top-3 right-9 size-7 bg-foreground flex items-center justify-center rounded-full">
			<Icon name="tabler:share" />
		</button>
		<button
			id="close-dialog-btn"
			class="absolute top-3 right-1 size-7 bg-foreground flex items-center justify-center rounded-full">
			<Icon name="tabler:x" />
		</button>
	</div>
</dialog>
<style>
	dialog {
		position: fixed;
		inset: 0;
		z-index: 999;
		max-width: 720px;
	}

	dialog[open] {
	}

	dialog[open]::backdrop {
		background: oklch(0% 0 0 / 0.9);
	}

	dialog::backdrop {
		background: #000;
	}
</style>

<link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />
<style is:global>
	:root {
		--plyr-color-main: oklch(var(--black));
	}

	#player {
		height: 100%;
	}
</style>
<script>
	// document.addEventListener('astro:page-load', async () => {
	const videoItemEl = document.querySelector('#show-dialog-btn')
	const dialogEl = document.querySelector('#video-dialog')

	if (dialogEl instanceof HTMLDialogElement && videoItemEl instanceof HTMLLIElement) {
		const { default: Plyr } = await import('plyr')
		const closeDialogBtn = dialogEl.querySelector('#close-dialog-btn') as HTMLButtonElement
		const shareVideoBtn = dialogEl.querySelector('#share-video-button') as HTMLButtonElement

		const playerEl = document.querySelector('#player') as HTMLVideoElement
		const videoUrl = playerEl.getAttribute('data-src')!
		const videoTitle = playerEl.getAttribute('data-title')!
		const player = new Plyr('#player')

		shareVideoBtn.addEventListener('click', async () => {
			if (!window.navigator.share) return

			const videoBlob = await fetch(videoUrl).then((res) => res.blob())

			window.navigator
				.share({
					text: videoTitle,
					files: [new File([videoBlob], 'producto-neystore.mp4', { type: videoBlob.type })],
					title: videoTitle,
				})
				.then(() => {
					console.log('Video compartido con exito')
				})
				.catch((err) => console.log('Error al compartir el video', err))
				.finally(() => {
					//Update state icon
					// shareVideoIcon.classList.remove('hidden')
					// loadingVideoIcon.classList.add('hidden')
					console.log('...sharing video')
				})
		})

		const closeModal = () => {
			dialogEl.close()
			player.pause()
		}

		const showModal = () => {
			dialogEl.showModal()
		}

		dialogEl.addEventListener('click', (event) => {
			if (event.target !== dialogEl) return
			closeModal()
		})

		videoItemEl.addEventListener('click', () => {
			showModal()
		})

		closeDialogBtn.addEventListener('click', () => {
			closeModal()
		})
	} else {
		console.log('Dialog not found')
	}
	// })
</script>
