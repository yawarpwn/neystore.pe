---
import { Icon } from 'astro-icon/components'
export interface Props {
	video: {
		url: string
		title: string
		cover: string
	}
}

const { video } = Astro.props

// class={`slider--img border-2 border-transparent opacity-50 size-[64px] flex-shrink-0 bg-white
//   flex items-center justify-center rounded-md overflow-hidden ml-2 first:ml-0
//   data-[thumb-active]:border-primary data-[thumb-active]:opacity-100 `}>

// class="fixed z-50 inset-0 w-full h-full bg-black backdrop:bg-white backdrop:backdrop-blur"
---

<li
	id="show-dialog-btn"
	class="size-[64px] border-2 border-transparent ml-4 rounded-md overflow-hidden relative flex-shrink-0 flex items-center justify-center cursor-pointer">
	<img class="absolute inset-0 w-full h-full object-cover" src={video.cover} />
	<span class="bg-black absolute rounded-full p-2 z-10">
		<Icon name="tabler:player-play-filled" class="text-white" size={24} />
	</span>
</li>
<dialog>
	<div class="md:max-w-3xl relative rounded-md overflow-hidden">
		<video
			class="w-full h-full"
			id="player"
			playsinline
			controls
			poster={video.cover}
			data-poster={video.cover}>
			<source src={video.url} type="video/mp4" />
		</video>
		<source src="/path/to/video.webm" type="video/webm" />
		<button
			id="close-dialog-btn"
			class="absolute top-1 right-1 size-7 bg-foreground flex items-center justify-center rounded-full">
			<Icon name="tabler:x" />
		</button>
	</div>
</dialog>
<style>
	dialog {
		position: fixed;
		inset: 0;
		z-index: 999;
	}

	dialog[open] {
	}

	dialog[open]::backdrop {
		background: oklch(0% 0 0 / 0.9);
	}

	dialog::backdrop {
		background: #000;
	}
</style>

<link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css" />
<style is:global>
	:root {
		--plyr-color-main: oklch(var(--black));
	}
</style>
<script>
	document.addEventListener('astro:page-load', async () => {
		const videoItemEl = document.querySelector('#show-dialog-btn')
		const dialogEl = document.querySelector('dialog')

		if (dialogEl instanceof HTMLDialogElement && videoItemEl instanceof HTMLLIElement) {
			const { default: Plyr } = await import('plyr')
			const closeDialogBtn = dialogEl.querySelector('#close-dialog-btn') as HTMLButtonElement

			const player = new Plyr('#player')

			const closeModal = () => {
				dialogEl.close()
				player.pause()
			}

			const showModal = () => {
				dialogEl.showModal()
			}

			dialogEl.addEventListener('click', (event) => {
				if (event.target !== dialogEl) return
				closeModal()
			})

			videoItemEl.addEventListener('click', () => {
				showModal()
			})

			closeDialogBtn.addEventListener('click', () => {
				closeModal()
			})
		} else {
			console.log('Dialog not found')
		}
	})
</script>
